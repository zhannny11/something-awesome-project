#!/usr/bin/env python3 
import secrets
import string
import sqlite3
import helpers
import bcrypt
import getpass
import argparse


"""Function to hash the password using bcrypt"""
def hash_password(password: str) -> bytes:
    # Generate a salt and hash the password
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode(), salt)
    return hashed_password

"""Function to verify the password"""
def verify_password(stored_hash: bytes, provided_password: str) -> bool:
    # Compare the provided password with the stored hash
    return bcrypt.checkpw(provided_password.encode(), stored_hash)

"""Initialise database"""
def create_table(db_name):
    # Connect to the SQLite database (creates the file if it doesn't exist)
    connection = sqlite3.connect(db_name)

    # Create a cursor object
    cursor = connection.cursor()

    # Create the table
    cursor.execute("""
        create table if not exists passwords (
            id integer primary key,
            url text not null,
            username text not null,
            password text not null
        );
    """)

    # Commit the changes and close the connection
    connection.commit()
    cursor.close()
    return connection

def create_master_password_table(cursor):
    cursor.execute("""
        create table if not exists master_password (
            id integer primary key,
            password_hash text not null
        );
    """)

def add_entry(cursor, url, username, password):
    hashed_password = hash_password(password)
    cursor.execute("INSERT INTO passwords (url, username, password) VALUES (?, ?, ?)", (url, username, password))
    print(f"Record Added:\n url: {url}, Username: {username}, Password: {password} (Plaintext)\n Encrypted: {hashed_password}")

def query_entry(cursor, url):
    cursor.execute("SELECT * FROM passwords WHERE url = ?", (url,))
    record = cursor.fetchone()
    if record:
        print(f"Record: url: {record[0]}, Username: {record[1]}, Password: {decrypt_password.decode('utf-8')}")
    else:
        print(f"Could not find record matching the value of '{url}'")



"""Generates passwords of a provided length"""
def password_gen(password_length):
    characters = string.ascii_letters + string.digits
    secure_password = ''.join(secrets.choice(characters) for i in range(password_length))
    return secure_password

"""Initialises parser and respective arguments"""
def initialise_parser():
    # Initialise parser
    my_parser = argparse.ArgumentParser(description="Password Manager Vault: Add, Update, and Delete urls, Usernames, and Passwords",     
                                        usage="%(prog)s [-a url USERNAME] [-q url] [-l] [-d url] [-ap url USERNAME PASSWORD] ... ")
    # Define command line arguments
    my_parser.add_argument("-a", "--add", type=str, nargs=2, help="Add new entry", metavar=("[url]", "[USERNAME]"))
    my_parser.add_argument("-q", "--query", type=str, nargs = 1, help="Look up entry by url", metavar=("[url]"))
    my_parser.add_argument("-l", "--list", action="store_true", help="List all entries in password vault")
    my_parser.add_argument("-d", "--delete", type=str, nargs=1, help="Delete entry by url", metavar=("[url]")) 
        # If users wish to add their own password instead of having an autogenerated one
    my_parser.add_argument("-ap", "--add_password", type=str, nargs=3, help="Add manual password", metavar=("[url]", "[USERNAME]", "[PASSWORD]")) 
    my_parser.add_argument("-uurl", "--update_url", type=str, nargs=2, help="Update a url", metavar=("[NEW_url]", "[OLD_url]"))
    my_parser.add_argument("-uname", "--update_username", type=str, nargs=2, help="Update a username in account", metavar=("[url]", "[NEW_USERNAME]")) 
    my_parser.add_argument("-upasswd", "--update_password", type=str, nargs=2, help="Update a password in account", metavar=("[url]", "[NEW_PASSWORD]"))
    return my_parser

def main():
    try:        
        db_name = "password.db"
        db = create_table(db_name)
        cursor = db.cursor()
        create_master_password_table(cursor)

        # Prompt for the master password
        master_password = getpass.getpass("Master password: ")

        # Hash the master password
        master_password_hash = hash_password(master_password)
        stored_hash = cursor.execute("SELECT password_hash FROM master_password").fetchone()
        
        # If there's no stored password, save the hash
        if not stored_hash:
            hashed_password = hash_password(master_password)
            cursor.execute("INSERT INTO master_password (password_hash) VALUES (?)", (hashed_password,))
            db.commit()
            print("Master password entered successfully.")
        elif not verify_password(stored_hash[0], master_password):
            print("Failed to authenticate.")
            sys.exit()

        args = initialise_parser().parse_args()


        if args.add:
            url, username = args.add
            password = password_gen(12)
            add_entry(cursor, url, username, password)
            db.commit()
        elif args.query:
            url = args.query[0]
            query_entry(cursor, url)
        elif args.list:
            cursor.execute("select * from passwords")
            if records:
                print("Listing all entries:")
                for record in records:
                    print(f"URL: {record[0]}, Username: {record[1]}, Password: (hidden)")
            else:
                print("No entries found in the password manager.")
        elif args.delete:
            url = args.delete[0]
            cursor.execute("delete from passwords where url = ?", (url,))
            db.commit()
            print(f"Deleted entry for url: {url}")
        elif args.add_password:
            url, username, password = args.add_password
            add_entry(cursor, url, username, password)
            db.commit()
            print(f"Password added for entry")
        elif args.update_url:
            new_url, old_url = args.update_url
            cursor.execute("update passwords set url = ? where url = ?", (new_url, old_url))
            db.commit()
            print(f"Updated url from {old_url} to {new_url}.")
        elif args.update_username:
            url, new_username = args.update_username
            cursor.execute("update passwords set username = ? where url = ?", (new_username, url))
            db.commit()
            print(f"Updated username for URL: {url}.")
        elif args.update_password:
            url, new_password = args.update_password
            cursor.execute("update passwords set password = ? where url = ?", (new_password, url))
            db.commit()
            print(f"Updated password for URL: {url}.")
        db.commit()

    except Exception as err:
        print(err)
    finally:
        if db:
            db.close()


if __name__ == "__main__":
    main()