#!/usr/bin/env python3 
import secrets
import string
import sqlite3
import helpers
import bcrypt

"""Function to hash the password using bcrypt"""
def hash_password(password: str) -> bytes:
    # Generate a salt and hash the password
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode(), salt)
    return hashed_password

"""Function to verify the password"""
def verify_password(stored_hash: bytes, provided_password: str) -> bool:
    # Compare the provided password with the stored hash
    return bcrypt.checkpw(provided_password.encode(), stored_hash)

"""Initialise database"""
def create_table(db_name):
    # Connect to the SQLite database (creates the file if it doesn't exist)
    connection = sqlite3.connect(db_name)

    # Create a cursor object
    cursor = connection.cursor()

    # Create the table
    cursor.execute("""
        create table if not exists passwords (
            id integer primary key,
            url text not null,
            username text not null,
            password text not null
        );
    """)

    # Commit the changes and close the connection
    connection.commit()
    cursor.close()
    return connection

    def add_entry(cursor, URL, username, password):
        cursor.execute("INSERT INTO passwords (url, username, password) VALUES (?, ?, ?)", (url, username, password))
        print(f"Record Added:\n URL: {URL}, Username: {username}, Password: {password} (Plaintext)\n Encrypted: {password_official}")

    def query_entry(cursor, URL):
        cursor.execute("SELECT * FROM passwords WHERE url = ?", (url,))
        record = cursor.fetchone()
        if record:
            print(f"Record: URL: {record[0]}, Username: {record[1]}, Password: {decrypt_password.decode('utf-8')}")
        else:
            print(f"Could not find record matching the value of '{URL}'")



"""Generates passwords of a provided length"""
def password_gen(password_length):
    characters = string.ascii_letters + string.digits
    secure_password = ''.join(secrets.choice(characters) for i in range(password_length))
    return secure_password

"""Initialises parser and respective arguments"""
def initialise_parser():
    # Initialise parser
    my_parser = argparse.ArgumentParser(description="Password Manager Vault: Add, Update, and Delete URLs, Usernames, and Passwords",     
                                        usage="%(prog)s [-a URL USERNAME] [-q URL] [-l] [-d URL] [-ap URL USERNAME PASSWORD] ... ")
    # Define command line arguments
    my_parser.add_argument("-a", "--add", type=str, nargs=2, help="Add new entry", metavar=("[URL]", "[USERNAME]"))
    my_parser.add_argument("-q", "--query", type=str, nargs = 1, help="Look up entry by URL", metavar=("[URL]"))
    my_parser.add_argument("-l", "--list", action="store_true", help="List all entries in password vault")
    my_parser.add_argument("-d", "--delete", type=str, nargs=1, help="Delete entry by URL", metavar=("[URL]")) 
        # If users wish to add their own password instead of having an autogenerated one
    my_parser.add_argument("-ap", "--add_password", type=str, nargs=3, help="Add manual password", metavar=("[URL]", "[USERNAME]", "[PASSWORD]")) 
    my_parser.add_argument("-uurl", "--update_url", type=str, nargs=2, help="Update a URL", metavar=("[NEW_URL]", "[OLD_URL]"))
    my_parser.add_argument("-uuname", "--update_username", type=str, nargs=2, help="Update a username in account", metavar=("[URL]", "[NEW_USERNAME]")) 
    my_parser.add_argument("-upasswd", "--update_password", type=str, nargs=2, help="Update a password in account", metavar=("[URL]", "[NEW_PASSWORD]"))
    return my_parser

def main():
    try:
        # Prompt for the master password
        master_password = getpass.getpass("Master password: ")

        # Hash the master password
        master_password_hash = hash_password(master_password)
        stored_hash = cursor.execute("SELECT password_hash FROM master_password WHERE id = 1").fetchone()
        
        # If there's no stored password, save the hash
        if not stored_hash:
            hashed_password = hash_password(master_password)
            cursor.execute("INSERT INTO master_password (password_hash) VALUES (?)", (hashed_password,))
            db.commit()
            print("Master password set successfully.")
        elif not verify_password(stored_hash[0], master_password):
            print("Failed to authenticate.")
            sys.exit()

        args = initialise_parser().parse_args()
        db_name = "password.db"
        db = create_table(db_name)
        cursor = db.cursor()

        url = "https://www.adidas.com.au/"
        username = "zhannny11@gmail.com"
        # can generate or provide password
        password = password_gen(12)
        cursor.execute("""
            INSERT INTO passwords (url, username, password)
            VALUES (?, ?, ?)
        """, (url, username, password))

        db.commit()


        # fetch all records
        cursor.execute("select * from passwords")
        record = cursor.fetchall()
        print(record)
        db.commit()

    except Exception as err:
        print(err)
    finally:
        if db:
            db.close()


if __name__ == "__main__":
    main()